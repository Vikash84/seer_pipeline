#!/usr/bin/env python

# Copyright (C) <2015> EMBL-European Bioinformatics Institute

# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# Neither the institution name nor the name seer_pipeline can
# be used to endorse or promote products derived from this
# software without prior written permission. For written
# permission, please contact <marco@ebi.ac.uk>.

# Products derived from this software may not be called
# seer_pipeline nor may seer_pipeline appear in their names
# without prior written permission of the developers.
# You should have received a copy of the GNU General Public
# License along with this program. If not, see
# <http://www.gnu.org/licenses/>.

def get_options():
    import argparse

    # create the top-level parser
    description = "Convert filtered K-mers to fastq"
    parser = argparse.ArgumentParser(description = description,
                                     prog = 'kmers2fastq')

    parser.add_argument('kmers', action='store',
                        help='Input filtered kmers file')
    
    parser.add_argument('--beta', action='store',
                        choices=['positive', 'negative', 'both'],
                        default='both',
                        help='Which beta should be considered [Default: both]')
    parser.add_argument('--pvalue', action='store',
                        default=None,
                        type=float,
                        help='P-value cutoff [Default: no cutoff]')

    return parser.parse_args()

if __name__ == "__main__":
    options = get_options()
    
    seq_id = 1
    for l in open(options.kmers):
        kmer, maf, pval, unknown, beta, unknown2 = l.rstrip().split('\t')
        beta  = float(beta)

        if options.pvalue is not None and float(pval) > options.pvalue:
            continue

        if options.beta == 'both':
            print('@%d\n%s\n+\n%s' % (
                  seq_id, kmer, ''.join(['~' for x in kmer])))
            seq_id += 1
        elif options.beta == 'positive' and beta > 0:
            print('@%d\n%s\n+\n%s' % (
                  seq_id, kmer, ''.join(['~' for x in kmer])))
            seq_id += 1
        elif options.beta == 'negative' and beta < 0:
            print('@%d\n%s\n+\n%s' % (
                  seq_id, kmer, ''.join(['~' for x in kmer])))
            seq_id += 1
